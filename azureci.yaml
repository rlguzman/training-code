name: $(date:yyyyMMdd)$(rev:.rr) #20191209.00

trigger:    # trigger the build when there is new code on master
  - master 

stages:
  - stage: compile 
    jobs:
      - job: aspnet
        pool:
          vmImage: ubuntu-18.04
        steps:
          - script: |
              dotnet build 3_devops/Devops.sln
  - stage: test
    jobs:
    - job: aspnet_test
      pool:
        vmImage: ubuntu-18.04
      steps:
        - script: dotnet test 3_devops/Devops.sln --logger trx --collect:"XPlat Code Coverage"
        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: cobertura
            summaryFileLocation: '**/coverage.cobertura.xml'
  - stage: analyze
    jobs:
    - job:
      pool:
        vmImage: ubuntu-18.04
      steps:
        - task: UseDotNet@2
          inputs:
            packageType: 'sdk'
            version: '3.0.100'
        - script: dotnet tool install --global dotnet-sonarscanner
        - script: |
            dotnet sonarscanner begin \
            /d:sonar.login=$(SONAR_LOGIN) \
            /d:sonar.host.url=https://sonarcloud.io \
            /d:sonar.cs.opencover.reportsPaths=**/TestResults/*/coverage.cobertura.xml \
            /d:sonar.cs.vstest.reportsPaths=**/*.trx \
            /k:devops-rlguzman \
            /o:rlguzman
            dotnet build 3_devops/Devops.sln
            dotnet test 3_devops/Devops.sln --logger trx
            dotnet sonarscanner end 
          env:
            SONAR_LOGIN: $(SONAR_LOGIN)
  - stage: pack
    jobs:
    - job:
      pool:
        vmImage: ubuntu-18.04
      steps:
        - script: docker image build -f 3_devops/dockerfile -t rlguzman/devops:$BUILD_NAME
          env:
            BUILD_NAME: $(Build.DefinitionName)
        - script: docker login -username $DOCKER_USER --password $DOCKER_TOKEN
          env:
            DOCKER_TOKEN: $(docker.token)
            DOCKER_USER: $(docker.user)
        - script: docker image push rlguzman/devops:$(BUILD_NAME)
          env:
            BUILD_NAME: $(Build.DefinitionName)
